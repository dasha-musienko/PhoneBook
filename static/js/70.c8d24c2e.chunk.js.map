{"version":3,"file":"static/js/70.c8d24c2e.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/ContactsPage/ContactsPage.styled.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from \"styled-components\";\nimport img from \"../../img/background.png\";\n\nexport const FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  align-items: center;\n  justify-content: center;\n\n  width: 499px;\n  flex-shrink: 0;\n  margin-top: 30px;\n\n  border-radius: 29px;\n  background: #fff;\n  box-shadow: 0px 4px 21.3px 0px rgba(0, 0, 0, 0.25);\n  padding: 32px 46px;\n`;\n\nexport const FormTitle = styled.h3`\n  color: #000;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  letter-spacing: -0.4px;\n`;\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\nexport const InputLabel = styled.p`\n  color: #b2b2b2;\n  font-size: 12px;\n  font-weight: 600;\n  padding-left: 10px;\n`;\n\nexport const StyledInput = styled.input`\n  padding: 10px;\n  color: #000;\n  font-size: 18px;\n  font-weight: 500;\n\n  border-bottom: 1px solid #b2b2b2;\n  transition: border-bottom 0.3s ease-in-out;\n\n  &:focus {\n    outline: none;\n    border-bottom: 1px solid #000;\n  }\n`;\n\nexport const FormButton = styled.button`\n  width: 100%;\n  height: 43px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #000;\n  color: #fff;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.3s linear;\n\n  border-radius: 31px;\n  background-color: #000;\n\n  &:hover {\n    background-color: #fff;\n    border: 1px solid #000;\n    color: #000;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const StyledDiv = styled.div`\n  width: 437px;\n  height: 109px;\n  flex-shrink: 0;\n  border-radius: 25px;\n  background-image: url(${img});\n  background-size: cover;\n`;\n","export const selectContacts = state => state.contacts.list;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.isError;\nexport const selectFilter = state => state.filter;\n","import styled from \"styled-components\";\nimport { Field, Form, ErrorMessage } from \"formik\";\n\nexport const ContactsCreateForm = styled(Form)`\n  width: 303px;\n  flex-shrink: 0;\n  padding: 40px 28px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  border-radius: 40px;\n  background: #000;\n`;\n\nexport const InputLabel = styled.label`\n  color: #b2b2b2;\n  font-size: 12px;\n  font-weight: 600;\n`;\n\nexport const StyledInput = styled(Field)`\n  padding: 10px;\n  background: transparent;\n  color: #fff;\n  font-size: 14px;\n  font-weight: 500;\n\n  border-bottom: 1px solid #B2B2B2;\n  transition: border-bottom 0.3s ease-in-out;\n  &:focus {\n    outline: none;\n    border-bottom: 1px solid #b2b2b2;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  margin-top: 6px;\n  color: red;\n  font-size: 12px;\n`;\n\nexport const ContactsAddBtn = styled.button`\n  width: 247px;\n  height: 53px;\n  flex-shrink: 0;\n  border-radius: 24px;\n  background: #fff;\n\n  color: #000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  color: #111;\n  font-size: 12px;\n  font-weight: 600;\n\n  margin-top: 20px;\n`;\n","import { Formik } from \"formik\";\nimport { nanoid } from \"nanoid\";\nimport Notiflix from \"notiflix\";\nimport * as Yup from \"yup\";\nimport {\n  ContactsAddBtn,\n  InputLabel,\n  ContactsCreateForm,\n  StyledInput,\n  StyledErrorMessage,\n} from \"./ContactForm.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { InputWrapper } from \"components/RegisterForm/RegisterForm.styled\";\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(3, \"Too Short!\").required(\"Required\"),\n  number: Yup.number().min(6, \"Too Short!\").required(\"Required\"),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = {\n      id: nanoid(),\n      name: values.name,\n      number: values.number,\n    };\n    const isContactDublicate = contacts.some(\n      (contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n    if (isContactDublicate) {\n      Notiflix.Notify.failure(`${newContact.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: \"\",\n          number: \"\",\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        <ContactsCreateForm>\n          <InputWrapper>\n            <InputLabel>Name</InputLabel>\n            <StyledInput\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Enter contact name\"\n            />\n            <StyledErrorMessage component=\"div\" name=\"name\" />\n          </InputWrapper>\n\n          <InputWrapper>\n            <InputLabel>Number</InputLabel>\n            <StyledInput\n              name=\"number\"\n              type=\"tel\"\n              placeholder=\"Enter contact phone\"\n            />\n            <StyledErrorMessage component=\"div\" name=\"number\" />\n          </InputWrapper>\n\n          <ContactsAddBtn type=\"submit\">Create contact</ContactsAddBtn>\n        </ContactsCreateForm>\n      </Formik>\n    </div>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ContactsListWrapper = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 754px;\n`;\n\nexport const Contact = styled.li`\n  display: flex;\n  flex-direction: row;\n  padding: 20px 12px;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const ContactName = styled.p`\n  color: #000;\n  font-size: 18px;\n  font-weight: 500;\n  width: 50%;\n`;\n\nexport const HelperWrapper = styled.div`\n  width: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nexport const ContactNumber = styled.div`\n  color: #000;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const DeleteBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: transparent;\n  transition: all 0.3s linear;\n\n  &:hover svg {\n    color: #000;\n  }\n  svg {\n    color: #EE0B0B;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n","import { TiDelete } from \"react-icons/ti\";\n\nimport {\n  Contact,\n  ContactNumber,\n  ContactsListWrapper,\n  DeleteBtn,\n  ContactName,\n  HelperWrapper,\n} from \"./ContactList.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { selectContacts, selectFilter } from \"redux/contacts/selectors\";\nimport { deleteContact } from \"redux/contacts/operations\";\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const visibleContacts = contacts.filter((contact) => {\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  return (\n    <ContactsListWrapper>\n      {visibleContacts.map(({ id, name, number }) => (\n        <Contact key={id}>\n          <ContactName>{name}</ContactName>\n          <HelperWrapper>\n            <ContactNumber>\n              <p>{number}</p>\n            </ContactNumber>\n            <DeleteBtn onClick={() => dispatch(deleteContact(id))}>\n              <TiDelete size=\"30px\" />\n            </DeleteBtn>\n          </HelperWrapper>\n        </Contact>\n      ))}\n    </ContactsListWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FormInput = styled.input`\n  padding: 10px 30px;\n  width: 754px;\n  height: 44px;\n  flex-shrink: 0;\n  border-radius: 19px;\n  border: 1px solid #4d4b4b;\n\n  color: #484848;\n  font-family: \"Poppins\";\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 10px;\n  &:focus {\n    outline: none;\n  }\n`;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { FormInput } from \"./Filter.styled\";\nimport { filteredContacts } from \"redux/contacts/filterSlice\";\nimport { selectFilter } from \"redux/contacts/selectors\";\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <FormInput\n      type=\"text\"\n      value={filter}\n      onChange={(evt) => {\n        dispatch(filteredContacts(evt.target.value));\n      }}\n      placeholder=\"Filter contacts by name...\"\n    />\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ContactsPageWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  gap: 64px;\n`;\n\nexport const ContactsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 10px;\n`;\n\nexport const ContactsTitle = styled.h2`\n  color: #000;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const UpdatingContactsBar = styled.div`\n  padding: 10px;\n  color: #111;\n  font-size: 12px;\n  font-weight: 500;\n`;\n","import { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectLoading } from \"redux/contacts/selectors\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport {\n  ContactsPageWrapper,\n  ContactsWrapper,\n  ContactsTitle,\n  UpdatingContactsBar,\n} from \"./ContactsPage.styled\";\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n\n      <ContactsPageWrapper>\n        <ContactForm />\n        <ContactsWrapper>\n          <ContactsTitle>Contacts List</ContactsTitle>\n          <div>\n            {isLoading && (\n              <UpdatingContactsBar>Updating contacts...</UpdatingContactsBar>\n            )}\n          </div>\n\n          <Filter />\n          <ContactList />\n        </ContactsWrapper>\n      </ContactsPageWrapper>\n    </>\n  );\n}\n"],"names":["FormContainer","styled","FormTitle","InputWrapper","InputLabel","StyledInput","FormButton","StyledDiv","img","selectContacts","state","contacts","list","selectLoading","isLoading","selectFilter","filter","ContactsCreateForm","Form","Field","StyledErrorMessage","ErrorMessage","ContactsAddBtn","contactSchema","Yup","shape","name","min","required","number","ContactForm","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","resetForm","newContact","id","nanoid","some","contact","toLowerCase","Notiflix","addContact","type","placeholder","component","ContactsListWrapper","Contact","ContactName","HelperWrapper","ContactNumber","DeleteBtn","ContactList","visibleContacts","includes","map","onClick","deleteContact","size","FormInput","Filter","value","onChange","evt","filteredContacts","target","ContactsPageWrapper","ContactsWrapper","ContactsTitle","UpdatingContactsBar","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}